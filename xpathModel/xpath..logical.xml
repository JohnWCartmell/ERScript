<?xml version="1.0" encoding="UTF-8"?>
<entity_model xmlns="http://www.entitymodelling.org/ERmodel"
              xmlns:diagram="http://www.entitymodelling.org/diagram"
              ERScriptVersion="1.6">
   <description>xpath 3.1
   </description>

<!-- 28-Mar-2023 The directive <xmlRepresentation>Anonymous</xmlRepresentation></composition> given to an already anonymous compsotion relationships is a signal to the 2rng transform (as at today) that positioning is significant and therefore not to interleave.
-->

   <xml><attributeDefault>Attribute</attributeDefault></xml>

   <absolute>
      <name>xpath-31</name>
      <composition type="Expr"/>
   </absolute>

   <entity_type name="Expr">
      <composition type="ExprSingle*"/>
   </entity_type>

   <entity_type name="Argument">
      <entity_type name="ArgumentPlaceholder"/>
      <entity_type name="ExprSingle">

         <entity_type name="UnaryExpr">
            <entity_type name="UnaryMinus" literal="-"/>
            <entity_type name="UnaryPlus"  literal="+"/>
            <composition type="ExprSingle"/>
         </entity_type>
         <entity_type name="BinaryOperation">
            <composition name="arg1" type="ExprSingle"><xmlRepresentation>Anonymous</xmlRepresentation></composition>
            <entity_type name="Or"/>
            <entity_type name="And"/>
            <entity_type name="Add" literal="+"/>
            <entity_type name="Subtract" literal="-"/>
            <entity_type name="Multiply" literal="*"/>
            <entity_type name="Div"/>
            <entity_type name="IntegerDivide" literal="idiv" />
            <entity_type name="Mod"/>
            <entity_type name="Union" literal=""/>
            <entity_type name="Intersect"/>
            <entity_type name="Except"/>
            <entity_type name="SimpleMap"  literal="!"/>
            <entity_type name="RangeExpr" literal="to"/>
            <entity_type name="StringConcat" literal="||"/>
            <entity_type name="ComparisonExpr">
               <diagram:enclosure xmlns="http://www.entitymodelling.org/diagram">
                  <x><at><right/><of>Or</of></at><delta>1</delta></x>
                  <y><at><top/><of>Or</of></at></y>
               </diagram:enclosure>
               <entity_type name="ValueComp">
                  <entity_type name="Eq"/>
                  <entity_type name="Ne"/>
                  <entity_type name="Lt"/>
                  <entity_type name="Le"/>
                  <entity_type name="Gt"/>
                  <entity_type name="Ge"/>
               </entity_type>
               <entity_type name="GeneralComp">
                  <diagram:enclosure xmlns="http://www.entitymodelling.org/diagram">
                     <x><at><right/><of>ValueComp</of></at><delta>1</delta></x>
                     <y><at><top/><of>ValueComp</of></at></y>
                  </diagram:enclosure>
                  <entity_type name="somewhat_eq" literal="="/>
                  <entity_type name="Somewhat_ne" literal="!="/>
                  <entity_type name="Somewhat_lt" literal="&lt;"/>
                  <entity_type name="Somewhat_le" literal="&lt;="/>
                  <entity_type name="Somewhat_gt" literal="&gt;"/>
                  <entity_type name="Somewhat_ge" literal="&gt;="/>
               </entity_type>
               <entity_type name="NodeComp">
                  <entity_type name="Is"/>
                  <entity_type name="Precedes"/>
                  <entity_type name="IsPrecededBy"/>
               </entity_type>
            </entity_type>
            <composition name="arg2" type="ExprSingle"><xmlRepresentation>Anonymous</xmlRepresentation></composition>
         </entity_type> <!-- end of BinaryOperation -->

         <entity_type name="ArrowExpr">
            <composition type="ExprSingle"/>
            <composition type="ArrowTransform+"/>
         </entity_type>

         <entity_type name="PathExpr">
            <diagram:enclosure xmlns="http://www.entitymodelling.org/diagram">
                  <x><at><right/><of>BinaryOperation</of></at><delta>1</delta></x>
                  <y><at><top/><of>BinaryOperation</of></at></y>
            </diagram:enclosure>
            <entity_type name="ContextualisedRelativePathExpr">
               <entity_type name="Root">
                    <composition  type="RelativePathExpr?"/>
                 </entity_type>
               <entity_type name="RootAndReach">
                    <composition  type="RelativePathExpr"/>
               </entity_type>
            </entity_type>
            <entity_type name="RelativePathExpr">
               <entity_type name="BinaryComposition">
                  <entity_type name="Compose"/>
                  <entity_type name="ReachingCompose"/>
                  <composition  name="path" type="RelativePathExpr"><xmlRepresentation>Anonymous</xmlRepresentation></composition>
                  <composition  name="step" type="StepExpr"><xmlRepresentation>Anonymous</xmlRepresentation></composition>
               </entity_type>
               <entity_type name="StepExpr">
                  <entity_type name="PostfixExpr">
                     <entity_type name="DynamicFunctionCall">
                        <composition  type="ExprSingle"/> <!-- this previously inherited from PostfixExpr -->
                        <composition name="args" type="Argument*"/>
                     </entity_type>
                     <entity_type name="PredicatedExpr">
                        <composition  type="ExprSingle"/> <!-- this previously inherited from PostfixExpr -->
                                                          <!-- I had to change it so that I could get control of the ordering
                                                                which I teat as significant since next predicate compositin
                                                                is anonymous consider having it named instead --> 
                        <composition name="predicate" type="Expr"><xmlRepresentation>Anonymous</xmlRepresentation></composition>
                     </entity_type>

                     <entity_type name="Lookup">
                        <composition type="ExprSingle?">
                           <!-- if this ExprSingle is absent then this is UnaryLookup 
                                   otherwise, if present, what we have is as described in the grammar as a postfix lookup -->
                        </composition>
                        <literal>?</literal>
                        <entity_type name="MapLookup">
                           <attribute name="NCName" type="string"/>
                        </entity_type>
                        <entity_type name="ArrayLookup">
                           <composition type="IntegerLiteral"><xmlRepresentation>Anonymous</xmlRepresentation></composition>
                        </entity_type>
                        <entity_type name="MapOrArrayFilter">
                           <composition type="ParenthesizedExpr"><xmlRepresentation>Anonymous</xmlRepresentation></composition>
                        </entity_type>
                        <entity_type name="AllMapOrArrayData"/>
                     </entity_type>
                     
                  </entity_type>
                  <entity_type name="PrimaryExpr">
                     <diagram:enclosure xmlns="http://www.entitymodelling.org/diagram">
                        <x><at><right/><of>DynamicFunctionCall</of></at></x>
                        <y><at><top/><of>DynamicFunctionCall</of></at></y>
                     </diagram:enclosure>
                     <entity_type name="Literal">
                          <entity_type name="IntegerLiteral">
                                 <attribute name="Digits" type="string"/>
                           </entity_type>
                          <entity_type name="DecimalLiteral">
                                 <attribute name="DecimalDigits" type="string"/>
                           </entity_type>
                          <entity_type name="DoubleLiteral">
                                 <attribute name="Mantissa" type="string"/>
                                 <attribute name="ExponentSymbol" type="string"/>
                                 <attribute name="Exponent" type="string"/>
                           </entity_type>
                           <entity_type name="StringLiteral">
                              <entity_type name="DoubleQuotedString">
                                 <literal>"</literal>
                                 <attribute name="DoubleQuotedStringContent" type="string"/>
                                 <literal>"</literal>
                              </entity_type>
                              <entity_type name="SingleQuotedString">
                                 <literal>'</literal>
                                 <attribute name="SingleQuotedStringContent" type="string"/>
                                 <literal>'</literal>
                              </entity_type>
                           </entity_type>
                     </entity_type>
                     <entity_type name="VarRef">
                        <literal>$</literal>
                        <composition type="EQName"/>
                     </entity_type>
                     <entity_type name="ParenthesizedExpr">  
                        <literal>(</literal>      
                        <composition  type="Expr?"/>
                        <literal>)</literal>
                     </entity_type>
                     <entity_type name="ContextItemExpr" literal="."/>
                     <entity_type name="FunctionCall">
                        <composition type="EQName"/>
                        <literal>(</literal>
                        <composition name="args" type="Argument*" separator=","/>
                        <literal>)</literal>
                     </entity_type>
                     <entity_type name="FunctionItemExpr">
                        <entity_type name="NamedFunctionRef">
                           <composition type="EQName"/>
                           <literal>#</literal>
                           <composition type="IntegerLiteral"/>
                        </entity_type>
                        <entity_type name="InlineFunctionExpr">
                           <literal>function(</literal>
                           <composition name="params" type="Param*" separator=","/>
                           <literal>)</literal>
                           <composition type="SequenceType?" prefixliteral="as"/>
                           <literal>{</literal>
                           <composition name="body" type="Expr?"><xmlRepresentation>Anonymous</xmlRepresentation>
                           <!-- code generation will need be first by child type and then subsequently by position if type is not definitive -->
                           </composition>
                           <literal>}</literal>
                        </entity_type>
                     </entity_type>
                     <entity_type name="MapConstructor">
                        <composition type="MapConstructorEntry+"/>
                     </entity_type>
                     <entity_type name="CurlyArrayConstructor">
                        <composition type="Expr?"/>
                     </entity_type>
                     <entity_type name="SquareArrayConstructor">
                        <composition type="ExprSingle*"/>
                     </entity_type>
                  </entity_type>
                  <entity_type name="AxisStep">  
                        <diagram:enclosure xmlns="http://www.entitymodelling.org/diagram">
                           <x><at><right/><of>PrimaryExpr</of></at></x>
                           <y><at><top/><of>PrimaryExpr</of></at></y>
                        </diagram:enclosure>
                     <entity_type name="PredicatedStep">
                        <composition type="AxisStep"/>
                        <composition name="predicate" type="Expr"><xmlRepresentation>Anonymous</xmlRepresentation></composition>
                     </entity_type>
                     <entity_type name="Step">
                        <entity_type name="AbbrevReverseStep">
                           <entity_type name="ParentNode"/>
                        </entity_type>
                        <entity_type name="ReverseStep">
                           <!--<composition  type="ReverseAxis"/>-->
                           <entity_type name="Parent"/>
                           <entity_type name="Ancestor"/>
                           <entity_type name="Preceding-sibling"/>
                           <entity_type name="Preceding"/>
                           <entity_type name="Ancestor-or-self"/>
                        </entity_type>
                        <entity_type name="ForwardStep">
                           <!--<composition  type="ForwardAxis"/>-->
                           <entity_type name="AbbrevForwardStep"/>
                           <entity_type name="Child"/>
                           <entity_type name="Descendant"/>
                           <entity_type name="Attribute"/>
                           <entity_type name="Self"/>
                           <entity_type name="Descendant-or-self"/>
                           <entity_type name="Following-sibling"/>
                           <entity_type name="Following"/>
                           <entity_type name="Namespace"/>
                        </entity_type>
                        <composition  type="NodeTest"/>
                     </entity_type>
                  </entity_type>
                  </entity_type>
            </entity_type>
         </entity_type>
         <entity_type name="LetOrForOrQuantifiedExpr">
            <diagram:enclosure xmlns="http://www.entitymodelling.org/diagram">
                  <x><at><right/><of>PathExpr</of></at><delta>1</delta></x>
                  <y><at><top/><of>PathExpr</of></at></y>
            </diagram:enclosure>
            <entity_type name="LetExpr">
               <literal = "let"/>
               <composition name="binding" type="SimpleLetBinding+"/>
               <composition name="return" type="ExprSingle"><xmlRepresentation>Anonymous</xmlRepresentation></composition>
            </entity_type>
            <entity_type name="ForOrQuantifiedExpr">
               <entity_type name="ForExpr">
                  <composition name="binding" type="SimpleForBinding+"/>
                  <literal>return</literal>
                  <composition name="return" type="ExprSingle"><xmlRepresentation>Anonymous</xmlRepresentation></composition>
               </entity_type>
               <entity_type name="QuantifiedExpr">
                  <entity_type name="Some"/>
                  <entity_type name="Every"/>
                  <composition name="binding" type="SimpleForBinding+" separator=","/>
                  <literal>satisfies</literal>
                  <composition name="satisfies" type="ExprSingle"><xmlRepresentation>Anonymous</xmlRepresentation></composition>
               </entity_type>
            </entity_type>
         </entity_type>
         <entity_type name="IfExpr">
            <diagram:enclosure xmlns="http://www.entitymodelling.org/diagram">
                  <x><at><right/><of>LetOrForOrQuantifiedExpr</of></at><delta>1</delta></x>
                  <y><at><top/><of>LetOrForOrQuantifiedExpr</of></at></y>
                  <w>3.5</w>
            </diagram:enclosure>
            <literal>if</literal>
            <composition name="condition" type="Expr"><xmlRepresentation>Anonymous</xmlRepresentation></composition>
            <literal>then</literal>
            <composition name="then" type="ExprSingle"><xmlRepresentation>Anonymous</xmlRepresentation></composition>
            <literal>else</literal>
            <composition name="else" type="ExprSingle"><xmlRepresentation>Anonymous</xmlRepresentation></composition>
         </entity_type>
         <entity_type name="ExprTypingExpr">
            <composition type="ExprSingle"/>
            <entity_type name="ExprSequenceTypingExpr">
               <entity_type name="InstanceofExpr" literal="instance of"/>
               <entity_type name="TreatExpr"      literal ="treat as"/>
               <composition type="SequenceType"/>
            </entity_type>
            <entity_type name="ExprSingleTypingExpr">
               <entity_type name="CastableExpr" literal="castable as"/>
               <entity_type name="CastExpr" literal="cast as"/>
               <composition name="TypeName" type="EQName"/>
               <composition type="Optional?"/>
            </entity_type>
         </entity_type>
      </entity_type> <!-- end of ExprSingle -->
   </entity_type> <!-- end of Argument -->
   <entity_type name="ArrowTransform" literal="=>">
      <entity_type name="StaticArrowTransform">
         <composition type="EQName"/>
      </entity_type>
      <entity_type name="DynamicArrowTransform">
         <composition type="ExprSingle"/>
      </entity_type>
      <composition name="args" type="Argument+" separator=","/>
   </entity_type>
   <entity_type name="Param">
      <composition type="EQName"/>
      <composition type="SequenceType"/>
   </entity_type>
   <entity_type name="MapConstructorEntry">
      <composition name="key" type="ExprSingle"><xmlRepresentation>Anonymous</xmlRepresentation></composition>
      <composition name="value" type="ExprSingle"><xmlRepresentation>Anonymous</xmlRepresentation></composition>
   </entity_type>
   <entity_type name="Binding">
      <entity_type name="SimpleForBinding" />
      <entity_type name="SimpleLetBinding"/>
         <composition type="EQName"/>
         <literal>:=</literal>
         <composition  type="ExprSingle"/>
   </entity_type>
   <entity_type name="NodeTest">
      <entity_type name="NameTest">
         <entity_type name="EQName">
            <entity_type name="QName">
               <attribute name="Prefix" type="string?" postfixliteral="?"/>
            </entity_type>
            <entity_type name="URIQualifiedName">
               <literal>{</literal>         
               <attribute name="URI" type="string"/>
               <literal>}</literal>
            </entity_type>
            <attribute name="LocalName" type="string" />
         </entity_type>

         <entity_type name="WildcardLike">
            <entity_type name="AnyPrincipalNode" literal="*"/>
            <entity_type name="AnyLocalName">
               <attribute name="Prefix" type="string" />
               <literal>:*</literal>
            </entity_type> 
            <entity_type name="AnyOrNoNamespace">
               <literal>*:</literal>
               <attribute name="LocalName" type="string" />
            </entity_type>
            <entity_type name="AnyURIQualifiedNode">
               <literal>{</literal>
               <attribute name="URI" type="string" />
               <literal>}*</literal>
            </entity_type>
         </entity_type>
      </entity_type>
      <entity_type name="KindTest(1)">
               <xmlRepresentation>Anonymous</xmlRepresentation>
               <composition type="KindTest"/>
            </entity_type>
   </entity_type>

   <entity_type name="ElementNameOrWildcard">
         <entity_type name="ElementName">
            <composition type="EQName"/>
         </entity_type>
         <entity_type name="ElementNameWildcard"/>
         <attribute name="typename" type="string?" literal=","> <!-- reference to schema type outwith pure xpath --> </attribute>
         <composition type="optional?" > <!-- there is a possible "?"  in syntax  --> </attribute>
   </entity_type>

   <entity_type name="TypeName">
      <composition type="EQName"/>
   </entity_type>

   <entity_type name="AttribNameOrWildcard">
         <entity_type name="AttributeName">
            <composition type="EQName"/>
         </entity_type>
         <entity_type name="AttributeNameWildcard" literal="*"/>
         <attribute name="typename" type="string?"> <!-- reference to schema type outwith pure xpath --> </attribute>
   </entity_type>

   <entity_type name="SequenceType">
      <entity_type name="EmptySequence"  literal="empty-sequence()"/>
      <entity_type name="SuchandSuchAManyItemType">
         <entity_type name="OccurrenceIndicator">
            <entity_type name="OccursZeroOrOne"     literal="?"/>
            <entity_type name="OccursZeroOneOrMore" literal="*"/>
            <entity_type name="OccursOneOrMore"     literal="+"/>
            <composition type="ItemType"/>
         </entity_type>
         <entity_type name="ItemType">
            <entity_type name="KindTest(2)">
               <xmlRepresentation>Anonymous</xmlRepresentation>
               <composition type="KindTest"/>
            </entity_type>
            <entity_type name="Item" literal="item()"/>
            <entity_type name="FunctionTest">
               <entity_type name="AnyFunctionTest"/>
               <entity_type name="TypedFunctionTest">
                  <literal>function (</literal>
                  <composition name="argTypes" type="SequenceType+"/>
                  <literal>) as </literal>
                  <composition name="returnType" type="SequenceType"/>
               </entity_type>
            </entity_type>
            <entity_type name="MapTest">
               <entity_type name="AnyMapTest"/>
               <entity_type name="TypedMapTest">
                  <composition name="keytype" type="SequenceType?"><xmlRepresentation>Anonymous</xmlRepresentation></composition>
                  <composition name="valuetype" type="AtomicOrUnionType"><xmlRepresentation>Anonymous</xmlRepresentation></composition>
               </entity_type>
            </entity_type>
            <entity_type name="AtomicOrUnionType">
               <composition type="EQName"/>
            </entity_type>
            <entity_type name="ArrayTest">
               <entity_type name="AnyArrayTest" literal="array()"/>
               <entity_type name="TypedArrayTest"> 
                  <literal>array(</literal>
                  <composition type="SequenceType"/>
                  <literal>)</literal>
               </entity_type>
            </entity_type>
            <entity_type name="ParenthesizedItemType">
               <literal>(</literal>
               <composition type="ItemType"/>
               <literal>)</literal>
            </entity_type>
         </entity_type> <!-- end ItemType -->
      </entity_type>
   </entity_type>

   <entity_type name="KindTest">
      <entity_type name="DocumentTest">
         <composition type="ElementTestOrSchemaElementTest?"/>
      </entity_type>
      <entity_type name="ElementTestOrSchemaElementTest">
         <entity_type name="ElementTest">
            <composition type="ElementNameOrWildcard?"/> 
            <composition type="TypeName?"/> 
         </entity_type>
         <entity_type name="SchemaElementTest"><composition type="ElementName"/></entity_type>
      </entity_type>
      <entity_type name="AttributeTest">
         <composition type="AttribNameOrWildcard?"/>
         <composition type="TypeName?"/> 
      </entity_type>
      <entity_type name="SchemaAttributeTest">
         <composition type="AttributeName"/>
      </entity_type>
      <entity_type name="PITest">
         <literal>processing-instruction(</literal>
         <attribute name="NCName" type="string?">       <!-- optional so as to be backward compatible with xpath 1.0 --></attribute>
         <composition type="StringLiteral?">             <!-- for backward ompatibility with xpath 1.0--></composition>
         <literal>)</literal>  
      </entity_type>
      <entity_type name="CommentTest" literal="comment()"/>
      <entity_type name="TextTest" literal="text()"/>
      <entity_type name="NamespaceNodeTest" literal="namespace-node"/>
      <entity_type name="AnyKindTest" literal="node()"/>
   </entity_type>  <!-- end KindTest -->

   <entity_type name="Optional" literal="?"/>

</entity_model>
