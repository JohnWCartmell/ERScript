<?xml version="1.0" encoding="UTF-8"?>
<entity_model xmlns="http://www.entitymodelling.org/ERmodel"
               xmlns:era="http://www.entitymodelling.org/ERmodel">

   <absolute>
      <name>entity_model</name>
      <description>
         <p> 
            This entity model can be said to be a meta-model --- it is an entity model which describes the structure of a typical entity model --- as such  this entity model is self-descriptive. 
         </p>
      </description>
      <composition>
         <type>entity_type</type>
         <description></description>
      </composition>
      <composition>
         <type>absolute</type>
         <description>A representation of the entirety of an entity model.</description>
      </composition>
   </absolute>
   <entity_type>
      <name>entity type like</name>
      <description>A generalisation of the types absolute and entity_type.</description>

      <entity_type>
         <name>absolute</name>
         <description>
            <p> Represents both the entirety of an entity model and the single structural root of instances of the model.
            </p>
            <p>
              Is entity type like and in any model instance is defined to have a single instance which is the root of the instance.
            </p>
            <p> 
               An entity model may be logical in which case will have no attributes specified as being implementations of relationships or it may be physical in which case it <i>will</i> be populated with such attributes. 
               If a model is physical then it may be hierarchical or relational. The distinction regards whether dependencies require implementing attributes. 
            </p>
         </description>
      </entity_type>

      <entity_type>
         <name>entity_type</name>
         <description>
            <p>
               Each entity type describes a class of like-structured entities by describing the relationships
               that they participate in and the properties that may be attributed to them.
            </p>
         </description>
         <composition>
            <type>entity_type</type>
            <description>
               <p> The subtypes of an entity type.</p>
            </description>
         </composition>
      </entity_type>
      <attribute>
         <name>name</name>
         <description>
            <p> 
               An attribute of type string  that uniquely identifies an entity type within an entity model.
               The name of absolute is the name of the whole and is therefore a name for the entire entity model.
            </p>
          </description>
      </attribute>
      <attribute>
         <name>description</name>
         <description>
            <p>Text documenting the meaning of the entity type.</p>
         </description>
      </attribute>

      <composition>
         <type>directional relationship</type>
         <description>
            <p> The set of outgoing relationships from an entity type.</p>
         </description>
      </composition>
      <composition>
         <type>attribute</type>
         <description>
            <p>The set of attributes of an entity type.</p> 
         </description>
      </composition>
   </entity_type>
   <entity_type>
      <name>attribute</name>
      <description>
         <p>
            A part of the structure of an entity type. 
         </p>
         <p>
            An attribute is a named property that may be attributed 
            to entitites of the type. Often thought of as a slot within an entity which may be filled in with a value.
            Dates, numeric values, names, text descriptions, colour and truth values (booleans) only make sense 
            as the values of attributes of entities. Attributes may be core attributes or may be derived from other values.
         </p>
         <p>
            In a physical representation, attributes may be present to implement relationships.
         </p> 
      </description>
      <dependency>
         <name>..</name>
         <type>entity type like</type>
         <description>.</description>
      </dependency>
      <composition>
         <type>implementationOf</type>
         <description>
            <p>
               If this is defined then the attribute is one that is only present in a physical entity model
                      and is present to implement a particular relationship out from the entity type.
            </p>
         </description>
      </composition>
      <composition>
         <name>type</name>
         <type>value_type</type>
         <description>
            <p>
               The type of the value of the attribute.
            </p>
         </description>
      </composition>
      <composition>
         <type>identifying(2)</type>
         <description>
            <p>
              If this is defined then it signifies that the attribute is one of a set of identifying attributes 
              of the entity type.
           </p>
            <p> 
              An identifying attribute in a physical model is a part of the primary key.
           </p>
         </description>
      </composition>
      <composition>
         <type>optional</type>
         <description>
            <p>
               If defined then the attribute is optional.
            </p>
         </description>
      </composition>
      <attribute>
         <name>name</name>
         <description>
            <p>
               The name of the attrbute.
            </p>
         </description>
      </attribute>
      <attribute>
         <name>description</name>
         <description>
            <p>
               A textual description of the atttribute.
            </p>
         </description>
      </attribute>
   </entity_type>

   <entity_type>
      <name>directional relationship</name>
      <description>
         <p>
            A binary relationship considered directionally as a relationship between entities of one type and entities of a second not necessarily distinct type  and represented as a feature of the first.
         </p>
         <p>
            On entity relationship diagrams, binary relationships are shown as labelled and cardinality annotated lines between boxes. In this meta model
            these abstract binary relationships are represented by pairs of directional relationships each of which is
            related to the other as inverse. 
         </p>    
         <p>
            Each binary relationship between entity types, call them A and B, is represented twice -- once from the point of view
            of A where it is thought of as being a path or a link to zero, one or more B's and once from the point of view of B where it is thought of as a path or a link to zero, one or more A's. These two directional relationships are inverse to one another. In exceptional cases a directional relationship is its own inverse.
         </p>  

      </description>
      <dependency>
         <name>..</name>
         <type>entity type like</type>
         <description>.</description>
      </dependency>
      <entity_type>
         <name>reference_or_dependency</name>
         <description></description>
         <entity_type>
            <name>dependency</name>
            <description>
                <p>
                  A dependency is a certain type of relationship. It is an inverse of a composition relationship
                  and therefore at the instance level relates an entity to the context in which it appears i.e. to a parent entity
                  or to the absolute. 
                </p>
             </description>
            <reference>
               <name>inverse_of</name>
               <type>composition</type>
               <description>
                  <p>
                     Relates a dependency to the composition relationship that it is an inverse of.
                  </p>
               </description>
            </reference>
         </entity_type>
         <entity_type>
            <name>reference</name>
            <description>
               <p>
                  A reference relationship is a binary relationship considered directionally as a relationship between entities of one type and entities of a second not necessarily distinct type  and represented as a feature
                  of the first type.
                  A reference relationship is such a binary relationship which is not classified 
                  as a composition relationship nor as a dependency and which, in a well-formed model at least, 
                  has an extent which cannot be inferred from the extents of the other primitive relationships in the model. 
               </p>
               <p>
                  To every reference relationship there is an inverse reference relationship.
               </p>
            </description>
            <reference>
               <name>inverse</name>
               <type>reference</type>
               <description>
                  <p>
                     Relates a reference relationship to a second not necesarily distint reference relationship that is its inverse.
                  </p>
               </description>
            </reference>
            <composition>
               <name>diagonal</name>
               <type>directional path</type>
               <description>
                  <p>
                     Part of the specification of the primary scope constraint of a reference relationship.
                  </p>
                  <p>
                   The primary scope constraint specifies a constraint on the extent of a subject relationship.
                   In many situations its presence obviates 
                   the need for one or more attributes which would  otherwise be required for the implementation of the subject relationship. 
                  </p>
                  <p>
                     Note that the primary scope constraint specifies a condition holding between some of the relationships of the model which in the  language of category theory can be expressed as the commutativity of a diagram of relationships. One side of this commuting diagram is the subject relationship. The <i>diagonal</i> specifes one of the other sides of this diagram.
                  </p>
                  <p>
                     For a discussion of the basic idea of scope see section
                     <a href="http://www.entitymodelling.org/tutorialone/scope.html">The Scope Concept</a>
                     of my online entity modelling book. 

                     For a discussion of diagrams expressing scope triangles and scope squares see section
                     <a href="http://www.entitymodelling.org/tutorialone/scopediagrams.html">Diagrams Expressing Scopes</a>.
                  </p>
                  <p>
                     This meta model enables expression of scope constraints that are triangular rather then square shaped.
                  </p> 
                  <p>
                     The <i>diagonal</i> is an instance of a <i>directional path</i>.
                  </p>
               </description>
            </composition>
            <composition>
               <name>riser</name>
               <type>directional path</type>
               <description>
                  <p>
                     Part of the specification of the primary scope constraint of a reference relationship.
                  </p>
                  <p>
                   The primary scope constraint specifies a constraint on the extent of a subject relationship.
                   In many situations its presence obviates 
                   the need for one or more attributes which would  otherwise be required for the implementation of the subject relationship.
                  </p>
                  <p>
                     Note that the primary scope constraint specifies a condition holding between some of the relationships of the model which in the  language of category theory can be expressed as the commutativity of a diagram of relationships. One side of this commuting diagram is the subject relationship. The inverse to
                     the <i>riser</i> specifes one of the other sides of this diagram.
                  </p>  
                  <p>
                     The <i>riser</i> is an instance of a <i>directional path</i>. 
                     It should consist of a step along a single <i>depedency</i> relationship or <i>join</i> of steps along dependency relationships.
                  </p>
               </description>
            </composition>
         </entity_type>
      </entity_type>
      <entity_type>
         <name>constructed_relationship</name>
         <description>A binary relationship between entities that can be derived from other more primitive relationships. </description>
         <reference>
            <name>inverse</name>
            <type>constructed_relationship</type>
            <description>.</description>
         </reference>
         <composition>
            <type>directional path</type>
            <description>
               <p> A <i>constructed_relationship</i> is a binary directed relationship whose extent may be constructed
                  entirely from the extents of the primitive relationships in the model. 
               </p>
               <p>
                  A <i>constructed_relationship</i> is defined by an instance of a <i>directional path</i> which defines how to construct the relationship from others and thereby, ultimately, from primitive relationships. 
               </p>
            </description>
         </composition>
      </entity_type>
      <entity_type>
         <name>composition</name>
         <description>
            <p>
               A binary relationship between entities in which entities on one side of the relationship may be said to be in part composed of entitites on the other side.
            </p>
         </description>
         <reference>
            <name>inverse</name>
            <type>dependency</type>
            <description>
               <p>
                  Relates a composition relationship to the dependency that is its inverse.
               </p>
            </description>
         </reference>
      </entity_type>
      <reference>
         <name>type</name>
         <type>entity type like</type>
         <description>
            <p>
               This is the second of two entity types participating in a directional and therefore  binary relationship. 
               The first, by the way,  being the host entity type of the  relationship.
            </p>  
            <p>
               If we think of the relationship as something that can be navigated then it can be navigated from entities of the 
               host type to arrive at entities of this second <i>type</i>.
            </p>
         </description>
      </reference>
      <composition>
         <type>sequence</type>
         <description>
            <p>
               Should only be present for relationships which are many-valued and specifies that the order of the many values is significant.
            </p>
         </description>
      </composition>
      <composition>
         <type>identifying(1)</type>
         <description>
            <p>
              If this is defined then it signifies that the relationship is one of a set of identifying relationships
              of its host entity type.
           </p>
           <p>
               In a physical model attributes that implement identifying relatuionships are themselves identifying.
            </p>
         </description>
      </composition>
      <composition>
         <name>cardinality</name>
         <type>cardinality</type>
         <description>
            <p>
               Defines the cardinality of a directed relationship.
            </p>
         </description>
      </composition>
      <attribute>
         <name>name</name>
         <description>
            <p>An attribute of type string.</p>
         </description>
      </attribute>
      <attribute>
         <name>description</name>
         <description>
            <p>An attribute of type string.</p>
         </description>
      </attribute>
      <attribute>
         <name>id</name>
         <description>
            <p>An attribute of type string.</p>
         </description>
      </attribute>
   </entity_type>
   <entity_type>
      <name>sequence</name>
         <description>
            <p>
               May be specified as a property of a many-valued composition relationship to indicate that with regard to the many-values of the composition at any given entity, order is important.  In this way it indicates a <i>sequence</i> of values rather than simple a <i>set</i> of values. 
            </p>
            <p>
               If <i>sequence</i> is specifed then in a relational implementation a sequence number column will be required.
            </p>
         </description>
   </entity_type>

   <entity_type>
      <name>identifying(1)</name>
         <description>
            <p>
               If present specifies that the host relationship is an identifying attribute of its host entity type.
            </p>
            <p>
               An entity type is specified to have one of more identifying attributes and relationships.
            </p>
         </description>
   </entity_type>
   <entity_type>
      <name>cardinality</name>
      <description>
         <p>
            Used to indicate the cardinality of a relationship.
         </p>
      </description>
      <entity_type>
         <name>ZeroOrOne</name>
         <description><p>Used to indicate the cardinality of a relationship.</p></description>
      </entity_type>
      <entity_type>
         <name>ExactlyOne</name>
         <description><p>Used to indicate the cardinality of a relationship.</p></description>
      </entity_type>
      <entity_type>
         <name>ZeroOneOrMore</name>
         <description><p>Used to indicate the cardinality of a relationship.</p></description>
      </entity_type>
      <entity_type>
         <name>OneOrMore</name>
         <description><p>Used to indicate the cardinality of a relationship.</p></description>
      </entity_type>
   </entity_type>

   <entity_type>
      <name>directional path</name>
      <description>
         <p> Represents a path through the relationships of the entity model and maybe single or many-valued.</p> 
      </description>

      <entity_type>
         <name>composite</name>
         <description>
            <p>A composite directional path.</p>
         </description>
         <composition>
            <type>component</type>
            <description>
               <p>
                  The steps that are to be composed in a composite directional path.
               </p>
            </description>
         </composition>
         <entity_type>
            <name>join</name>
            <description>
               <p>
                  The joining togther of directional paths end to end to form a composite directional path.
               </p>
            </description>
         </entity_type>
         <entity_type>
            <name>aggregate</name>
            <description>
               <p>
                  Represents the aggregation or union of multiple directional paths to form a composite directional path.
               </p>
            </description>
         </entity_type>
      </entity_type>
      <entity_type>
         <name>component</name>
         <description>
            <p>
               A step along a relationship which is either the whole of or a part of a directional path.
            </p>
         </description>
         <reference>
            <name>rel</name>
            <type>directional relationship</type>
            <description><p>The relationship along which a step is taken.</p></description>
         </reference>
      </entity_type>
      <entity_type>
         <name>component</name>
         <description>An entity type..</description>
         <reference>
            <name>relSrc</name>
            <type>entity type like</type>
            <description><p>The source entity type of the 'rel' relationship.</p></description>
         </reference>
      </entity_type>
      <entity_type>
         <name>identity</name>
         <description>
            <p>
             The identity directional path.
          </p>
        </description>
         </entity_type>
         <entity_type>
            <name>theabsolute</name>
            <description>
               <p>
                  A directional path to the absolute.
               </p>
         </description>
         </entity_type>
      <reference>
         <name>src</name>
         <type>entity type like</type>
         <description>
            <p>
            </p>
         </description>
      </reference>
      <reference>
         <name>dest</name>
         <type>entity type like</type>
         <description>
            <p>
            </p>
         </description>
      </reference>
   </entity_type>

   <entity_type>
      <name>auxiliary_scope_constraint</name>
      <description>
         <p>
          If present this specifies a constraint on the extent of a subject relationship  additional to any other scope constraint that may  be specified for it. 
          Like a principle scope constraint its presence obviates 
          the need for one or more attributes which would  otherwise be required for the implementation of the subject relationship.
         </p>
         <p>
            As can also be said of a principle scope constraint, it specifies a condition holding between  relationships of the model which in the  language of category theory can be expressed as the commutativity of a diagram of relationships.
         </p>
      </description>
      <reference>
         <name>identifying_relationship</name>
         <description>
            <p>
               Part of the specification of the auxiliary scope constraint of a reference relationship.
            </p>
            <p>
               Each auxiliary scope constraint specifies a condition holding between some of the relationships of the model which in the  language of category theory can be expressed as the commutativity of a diagram of relationships. One side of this commuting diagram is the subject relationship. The <i>identifying_relationship</i> specifes one of the other sides of this diagram.
            </p>
            <p>
               The <i>identifying_relationship</i> is an instance of <i>directed relationship</i> and should have the <i>identifying</i> property.
            </p>
         </description>
      </reference>
      <composition>
         <name>equivalent_path</name>
         <description>
            <p>
               Part of the specification of the auxiliary scope constraint of a reference relationship.
            </p>
            <p>
               Each auxiliary scope constraint specifies a condition holding between some of the relationships of the model which in the  language of category theory can be expressed as the commutativity of a diagram of relationships. One side of this commuting diagram is the subject relationship. The <i>equivalent_path</i> specifes one of the other sides of this diagram.
            </p>
            <p>
               The <i>equivalent_path</i> is an instance of a <i>directional path</i>.
            </p>
         </description>
      </composition>
   </entity_type>

   <entity_type>
      <name>implementationOf</name>
      <description>
        <p>
          Present for those attributes within a physical model whose purpose is to implement or be part of the implementation of a relationship.  
        </p>
      </description>
      <dependency>
         <name>..</name>
         <type>attribute</type>
         <description>
            <p>
               The host attribute whose purpose is to implement or be part of the implementation of a relationship.
            </p>
         </description>
      </dependency>
      <reference>
         <name>destAttr</name>
         <type>attribute</type>
         <description>
            <p>
            This is an identifying attribute of the destination entity type of the relationship <i>rel</i> which is being implemented.
            </p> 
         </description>
      </reference>
      <reference>
         <name>destAttrHostEt</name>
         <type>entity type like</type>
         <description>
             <p>
               This the the host entity type of the attribute <i>destAttr</i>.
             </p>
             <p>
               If the <i>destrAttrHostEt</i> is distinct from the destination type of the implmented relationship <i>rel</i>
               then the path from the destination type to the <i>destrAttrHostEt</i> is specified as the <i>reachedBy</i> relationship.
            </p>
         </description>
      </reference>
      <reference>
         <name>rel</name>
         <type>reference_or_dependency</type>
         <description>
            <p>
               This is the reference relationship which is in whole or in part implemented by this foreign key attribute.
            </p>
         </description>
      </reference>
      <composition>
         <name>reached_by</name>
         <type>directional path</type>
         <description>
            <p>
               This is the path from the destination type of the implemented relationship <i>rel</i>
               to the host entity type of the implemented identifying attribute <i>destAttr</i>.
            </p>
         </description>
      </composition>
   </entity_type>

   <entity_type>
      <name>value_type</name>
      <description>
         <p>
            Specifies the type of an attribute.
         </p>
         <p>
            Philosophically speaking the possibly types are "types all of whose instances are universals".
         </p>
      </description>
      <entity_type>
         <name>boolean</name>
         <description><p>Specifies the type of the host attribute to be the boolean type.</p></description>
      </entity_type>
      <entity_type>
         <name>date</name>
         <description><p>Specifies the type of the host attribute to be the date type.</p></description>
      </entity_type>
      <entity_type>
         <name>dateTime</name>
         <description><p>Specifies the type of the host attribute to be the date and time type.</p></description>
      </entity_type>
      <entity_type>
         <name>integer</name>
         <description><p>Specifies the type of the host attribute to be the integer type.</p></description>
      </entity_type>
      <entity_type>
         <name>float</name>
         <description><p>Specifies the type of the host attribute to be the float type.</p></description>
      </entity_type>
      <entity_type>
         <name>nonNegativeInteger</name>
         <description><p>Specifies the type of the host attribute to be the nonNegativeInteger type.</p></description>
      </entity_type>
      <entity_type>
         <name>positiveInteger</name>
         <description><p>Specifies the type of the host attribute to be the positiveInteger type.</p></description>
      </entity_type>
      <entity_type>
         <name>string</name>
         <description><p>Specifies the type of the host attribute to be the string type.</p></description>
      </entity_type>
      <entity_type>
         <name>time</name>
         <description><p>Specifies the type of the host attribute to be the time type.</p></description>
      </entity_type>
   </entity_type>
   <entity_type>
      <name>identifying(2)</name>
      <description>
         <p>
            If present specifies that the host attribute is an idenitfying attribute of it host entity type.
         </p>
         <p>
            An entity type is specified to have one of more identifying attributes and relationships.
         </p>
      </description>
   </entity_type>
   <entity_type>
      <name>optional</name>
      <description>
         <p>
            Specifies that the host attribute is optional in other words that
            it is expected that 
            for some entities the attribute may not have a defined value.
         </p>
      </description>
   </entity_type>
</entity_model>
