<?xml version="1.0" encoding="UTF-8"?>
<entity_model xmlns="http://www.entitymodelling.org/ERmodel"
               xmlns:era="http://www.entitymodelling.org/ERmodel">

   <absolute>
      <name>entity_model</name>
      <description>
         <p> 
            This entity model is an <i>entity model of entity models</i>.
            Because of its unique and self-descriptive nature it is sometimes described as a meta-model.
         </p>
         <p>
            This entity model was developed to support software development and it is coded in ERScript software. It is instanced in all the ER diagrams presented in my online
            <a href="http://www.entitymodelling.org">entity modelling book</a>
             but note that this model does not describe the diagrams themselves but  the logical content of those diagrams and also note that
             ER diagrams are just one a way of presenting the information contained in a typical entity model. 
         </p>
         <p> 
            The entity models described by this model may be physical or logical and this distinction we should
            summarise here. 
            In brief, a physical model is populated with attributes that are required to describe the implementation of relationships and is saturated with such for the purposes of either hierarchical or relational implementation 
            (the latter generally requiring more attributes than the former).
            A logical model has no such attributes. Those models that are physical may be hierarchically-physical or relationally-physical. 
         </p>
         <p>
          For more on the distinction between logical and physical models see section
                     <a href="http://www.entitymodelling.org/tutorialtwo/physicalERmodels.html">Logical and Physical</a>
                     of the online book.
         </p> 
         <p>
            In the descriptions below the entity model which is described by this meta model is referred to as the subject entity model.
         </p> 

         <p>
            Consider for a monent that this meta model is an entity model and thus must be logical or physical.
            For this reason this meta model is available in two forms and you may be reading one or the other of these, either the <a href="www.entitymodelling.org/???">logical one</a> or the <a href="www.entitymodelling.org/???">hierarchically physical one</a>.
         </p>                
      </description>
      <composition>
         <type>entity_type</type>
         <description></description>
      </composition>
      <composition>
         <type>absolute</type>
         <description>A representation of the entirety of the subject entity model.</description>
      </composition>
   </absolute>
   <entity_type>
      <name>entity type like</name>
      <description>A generalisation of the types <i>absolute</i> and <i>entity_type</i>.</description>

      <entity_type>
         <name>absolute</name>
         <description>

            <p> Represents both the entirety of the subject entity model and the logical root of the model.
            </p>
            <p>
              <i>absolute</i> is <i>entity type like</i> and in any instance of the subject model 
              has a single instance which, logically, is the root of the entire system of entities described by the model.
            </p>
            <p>
               For the thinking behind the naming of this concept see the section
               <a href="http://www.entitymodelling.org/perspective/theabsolute.html">The Absolute</a>.
               In the language of category theory the absolute is a terminal object.
            </p>
         </description>
      </entity_type>

      <entity_type>
         <name>entity_type</name>
         <description>
            <p>
               Each <i>entity type</i> describes a class of like-structured entities by describing the relationships
               that they participate in and the properties that may be attributed to them.
            </p>
         </description>
         <composition>
            <type>entity_type</type>
            <description>
               <p> The subtypes of an entity type.</p>
            </description>
         </composition>
      </entity_type>
      <attribute>
         <name>name</name>
         <description>
            <p> 
               An attribute of type string  that uniquely identifies an entity type within an entity model.
               The name of absolute is the name of the whole and is therefore a name for the entire entity model.
            </p>
          </description>
      </attribute>
      <attribute>
         <name>description</name>
         <description>
            <p>Text documenting the meaning of the entity type.</p>
         </description>
      </attribute>

      <composition>
         <type>directional relationship</type>
         <description>
            <p> The set of outgoing relationships from an entity type.</p>
         </description>
      </composition>
      <composition>
         <type>attribute</type>
         <description>
            <p>The set of attributes of an entity type.</p> 
         </description>
      </composition>
   </entity_type>
   <entity_type>
      <name>attribute</name>
      <description>
         <p>
            A part of the structure of an entity type. 
         </p>
         <p>
            An attribute is a named property that may be attributed 
            to entities of the host entity type. Attribute instances are often described each as a slot within an entity which may have a value assigned.
            Dates, numeric values, names, text descriptions, colour and truth values (booleans) only ever make sense 
            as the values of attributes of entities.
         </p>
         <p>
            In a physical model, attributes may be present to implement relationships 
            and  any such attributes will be distinguished from purely logical attributes  by 
            the presence of <i>reference_constraint</i> substructure.
         </p> 
      </description>
      <dependency>
         <name>..</name>
         <type>entity type like</type>
         <description>.</description>
      </dependency>
      <composition>
         <type>reference_constraint</type>
         <description>
            <p>
               If this is defined then the attribute is one that is only present in a physical entity model
                      and is present to implement a particular relationship out from the entity type.
            </p>
         </description>
      </composition>
      <composition>
         <name>type</name>
         <type>type_constraint</type>
         <description>
            <p>
               The type of the value of the attribute.
            </p>
         </description>
      </composition>
      <composition>
         <type>identifying(2)</type>
         <description>
            <p>
              If this is defined then it signifies that the attribute is one of a set of identifying attributes 
              of the entity type.
           </p>
            <p> 
              An identifying attribute in a physical model is a part of the primary key.
           </p>
         </description>
      </composition>
      <composition>
         <type>optional</type>
         <description>
            <p>
               If defined then the attribute is optional.
            </p>
         </description>
      </composition>
      <attribute>
         <name>name</name>
         <description>
            <p>
               The name of the attrbute.
            </p>
         </description>
      </attribute>
      <attribute>
         <name>description</name>
         <description>
            <p>
               A textual description of the atttribute.
            </p>
         </description>
      </attribute>
   </entity_type>

   <entity_type>
      <name>directional relationship</name>
      <description>
         <p>
            A binary relationship considered directionally as a relationship between entities of one type and entities of a second not necessarily distinct type  and represented as a feature of the first type.
         </p>
         <p>
            On entity relationship diagrams, binary relationships are shown as doubly labelled and cardinality annotated lines between boxes. In this meta model
            these abstract binary relationships are represented by pairs of directional relationships each of which is
            related to the other as inverse. 
         </p>    
         <p>
            Suppose a  binary relationship relates two  types A and B. 
            This binary relationship will be represented in an entity model twice -- once from the point of view
            of A where it is thought of as being a path or a link to zero, one or more B's and once from the point of view of B where it is thought of as a path or a link to zero, one or more A's. These two directional relationships are inverse to one another. There is an exception
            in the  case of a symmetric binary relationship, these are represented by a single directional relationship which is defined as its own inverse.
         </p>  

      </description>
      <dependency>
         <name>..</name>
         <type>entity type like</type>
         <description>.</description>
      </dependency>
      <entity_type>
         <name>primitive relationship</name>
         <description></description>
         <composition>
            <type>identifying(1)</type>
            <description>
               <p>
                 If this is defined then it signifies that the relationship is one of a set of identifying relationships
                 of its host entity type.
              </p>
              <p>
                  In a physical model attributes that implement identifying relatuionships are themselves identifying.
               </p>
            </description>
         </composition>
         <entity_type>
            <name>dependency</name>
            <description>
                <p>
                  A <i>dependency</i> is a certain type of <i>directed relationship</i>.
                  By definition it  is an inverse to a composition relationship
                  and therefore at the instance level relates an entity to the context in which it appears 
                  i.e. to a parent entity or to the absolute. 
                </p>
             </description>
            <reference>
               <name>inverse_of</name>
               <type>composition</type>
               <description>
                  <p>
                     Relates a dependency to the composition relationship that it is an inverse of.
                  </p>
               </description>
            </reference>
         </entity_type>
         <entity_type>
            <name>reference</name>
            <description>
               <p>
                  A reference relationship is a certain kind of <i>directional relationship</i> which is neither classified as a composition relationship nor as a dependency and which, in a well-formed model at least, 
                  has an extent which cannot be inferred from the extents of the other primitive relationships in the model. 
               </p>
               <p>
                  To every reference relationship there is an inverse reference relationship.
               </p>
               <p>
                  For the distiction between composition and reference see
                  <a href="http://www.entitymodelling.org/tutorialone/compositionvreference.html">
                     Composition and Reference
                  </a>.
               </p>
               <p>
                  Primary and auxiliray scopes !!!
               </p>
            </description>
            <reference>
               <name>inverse</name>
               <type>reference</type>
               <description>
                  <p>
                     Relates a reference relationship to a second not necesarily distint reference relationship that is its inverse.
                  </p>
                  <p>
               This relationship  has an primary scope constraint. This can be illustrated as follows 
               <!-- <div id="svgcontainer"> -->
                  <object id="svg-object"
                           data="reference.inverse..primary_scope.svg"
                           type="image/svg+xml">filler to stop contraction of this xml element</object>
               <!-- </div> -->
               </p>
                <p>
               This relationship  also has an auxiliary scope constraint. This is illustrated as follows 
               <!-- <div id="svgcontainer"> -->
                  <object id="svg-object"
                           data="reference.inverse..auxiliary_scope.svg"
                           type="image/svg+xml">filler to stop contraction of this xml element</object>
               <!-- </div> -->
               </p>
               </description>
            </reference>
            <composition>
               <name>diagonal</name>
               <type>directional path</type>
               <description>
                  <p>
                     Part of the specification of the primary scope constraint of a reference relationship.
                  </p>
                  <p>
                   The primary scope constraint specifies a constraint on the extent of a subject relationship.
                   In many situations its presence obviates 
                   the need for one or more attributes which would  otherwise be required for the implementation of the subject relationship. 
                  </p>
                  <p>
                     Note that the primary scope constraint specifies a condition holding between some of the relationships of the model which in the  language of category theory can be expressed as the commutativity of a diagram of relationships. One side of this commuting diagram is the subject relationship. The <i>diagonal</i> specifes one of the other sides of this diagram.
                  </p>
                  <p>
                     For a discussion of the basic idea of scope see section
                     <a href="http://www.entitymodelling.org/tutorialone/scope.html">The Scope Concept</a>
                     of my online entity modelling book. 

                     For a discussion of diagrams expressing scope triangles and scope squares see section
                     <a href="http://www.entitymodelling.org/tutorialone/scopediagrams.html">Diagrams Expressing Scopes</a>.
                  </p>
                  <p>
                     This meta model enables expression of scope constraints that are triangular rather then square shaped.
                  </p> 
                  <p>
                     The <i>diagonal</i> is an instance of a <i>directional path</i>.
                  </p>
               </description>
            </composition>
            <composition>
               <name>riser</name>
               <type>directional path</type>
               <description>
                  <p>
                     Part of the specification of the primary scope constraint of a reference relationship.
                  </p>
                  <p>
                   The primary scope constraint specifies a constraint on the extent of a subject relationship.
                   In many situations its presence obviates 
                   the need for one or more attributes which would  otherwise be required for the implementation of the subject relationship.
                  </p>
                  <p>
                     Note that the primary scope constraint specifies a condition holding between some of the relationships of the model which in the  language of category theory can be expressed as the commutativity of a diagram of relationships. One side of this commuting diagram is the subject relationship. The inverse to
                     the <i>riser</i> specifes one of the other sides of this diagram.
                  </p>  
                  <p>
                     The <i>riser</i> is an instance of a <i>directional path</i>. 
                     It should consist of a step along a single <i>dependency</i> relationship or <i>join</i> of steps along dependency relationships.
                  </p>
               </description>
            </composition>
         </entity_type>
      </entity_type>
      <entity_type>
         <name>constructed_relationship</name>
         <description>
            <p> A <i>constructed_relationship</i> is an inferrable  relationship i.e. one  whose extent may be inferred from the extents of other relationships in the model. 
            </p>
            <p>
               Each  <i>constructed_relationship</i> is defined by an instance of a <i>directional path</i> which defines how to construct the relationship from other, ultimately primitive, relationships. 
            </p>
         </description>
         <composition>
            <type>directional path</type>
            <description>
               <p>
                  A <i>constructed_relationship</i> is defined by an instance of a <i>directional path</i> which defines how to construct the relationship from others and thereby, ultimately, from primitive relationships. 
               </p>
            </description>
         </composition>
      </entity_type>
      <entity_type>
         <name>composition</name>
         <description>
            <p>
               The name of this meta-type, <i>composition</i>, is a shortened form
               of <i>composition relationship</i>.
            </p>
            <p>
               A <i>composition</i>, i.e a <i>composition relationship</i>, is a directional  relationship for
               which which entities of one type (the host entity type of the relationship) 
               may be said to be in part composed of the so related entities of a second type 
               (the <i>type</i> of the relationship). 
            </p>
            <p> 
               In this meta model composition relationships are classifed as directional relationships and are distiguished from reference relationships and  dependency relationships.
               Dependency relationships are, by definition, the inverses to composition relationships.
               For the distiction between composition and reference see
               <a href="http://www.entitymodelling.org/tutorialone/compositionvreference.html">
                  Composition and Reference
               </a>.
            </p>
            <p> 
               Composition relationships may be specified as either single-valued or many-valued. This is specified as the <i>cardinality</i> of the relationship. For a many-valued relationship it may be 
               specified whether or not sequential order of the many-values is significant.
            </p>
            <p>
               The cardinality of a composition relationships is a constraint on its extent. 
               Its extent may be further constrained by a <i>pullback constraint</i>.
            </p>
         </description>
         <reference>
            <name>inverse</name>
            <type>dependency</type>
            <description>
               <p>
                  Relates a composition relationship to the dependency that is its inverse.
               </p>
                <p>
               This relationship has a constraint that
               "the host entity type of the inverse of a composition relationship must be the destination
               type of the relationship".

               Equationally this is to say the the directional path <i>inverse/host_entity_type</i>
               is equivalent to the (single step) path <i>type</i>.
               In the entity model this equivalence  is modelled as a primary scope constraint by specifying the <i>inverse</i> relationship to have  
                <i>host_entity_type</i> as  <i>riser</i> and 
                <i>type</i> as <i>diagonal</i>. 
               We can illustrate the relationships involved in this commutative diagram:
               </p>
                  <object id="svg-object"
                           data="composition.inverse..primary_scope.svg"
                           type="image/svg+xml">filler to stop contraction of this xml element</object>
    
                <p>
               This relationship has a second constraint that
               "the destination <i>type</i> of the <i>inverse</i> of a composition relationship
               must be the <i>host_entity_type</i> of the relationship".
               Equationally this is to say the the directional path <i>inverse/type</i>
               is equivalent to the (single step) path <i>host_entity_type</i>.
               In the entity model this equivalence  is modelled as an auxiliary scope constraint of the
               relationship <i>inverse</i> by specifying <i>type</i> as the <i>identifying_relationship</i>
               and  <i>host_entity_type</i> as the <i>equivalent_path</i>.
               The relationships involved are shown in this commutative diagram:
            </p>
                  <object id="svg-object"
                           data="composition.inverse..auxiliary_scope.svg"
                           type="image/svg+xml">filler to stop contraction of this xml element</object>

            </description>
         </reference>
      </entity_type>
      <reference>
         <name>type</name>
         <type>entity type like</type>
         <description>
            <p>
               This is the second of two entity types participating in a directional and therefore  binary relationship. 
               The first, by the way,  being the host entity type of the  relationship.
            </p>  
            <p>
               If we think of the relationship as something that can be navigated then it can be navigated from entities of the 
               host type to arrive at entities of this second <i>type</i>.
            </p>
         </description>
      </reference>
      <composition>
         <type>sequence</type>
         <description>
            <p>
               Should only be present for relationships which are many-valued and specifies that the order of the many values is significant.
            </p>
         </description>
      </composition>

      <composition>
         <name>cardinality</name>
         <type>cardinality</type>
         <description>
            <p>
               Defines the cardinality of a directed relationship.
            </p>
         </description>
      </composition>
      <attribute>
         <name>name</name>
         <description>
            <p>An attribute of type string.</p>
         </description>
      </attribute>
      <attribute>
         <name>description</name>
         <description>
            <p>An attribute of type string.</p>
         </description>
      </attribute>
      <attribute>
         <name>id</name>
         <description>
            <p>An attribute of type string.</p>
         </description>
      </attribute>
   </entity_type>
   <entity_type>
      <name>sequence</name>
         <description>
            <p>
               May be specified as a property of a many-valued composition relationship to indicate that with regard to the many-values of the composition at any given entity, order is important.  In this way it indicates a <i>sequence</i> of values rather than simple a <i>set</i> of values. 
            </p>
            <p>
               If <i>sequence</i> is specifed then in a relational implementation a sequence number column will be required.
            </p>
         </description>
   </entity_type>

   <entity_type>
      <name>identifying(1)</name>
         <description>
            <p>
               If present specifies that the host relationship is an identifying attribute of its host entity type.
            </p>
            <p>
               An entity type is specified to have one of more identifying attributes and relationships.
            </p>
         </description>
   </entity_type>
   <entity_type>
      <name>cardinality</name>
      <description>
         <p>
            Broad classification of the expected number of instances of a directional relationship
            at specific entities of its host type.
         </p>
      </description>
      <entity_type>
         <name>ZeroOrOne</name>
         <description>
             <p>
               Used to indicate the cardinality of an optional single-valued relationship.
             </p>
          </description>
      </entity_type>
      <entity_type>
         <name>ExactlyOne</name>
         <description>
            <p>
               Used to indicate the cardinality of a mandatory single-valued relationship.
            </p>
         </description>
      </entity_type>
      <entity_type>
         <name>ZeroOneOrMore</name>
         <description>
            <p>
               Used to indicate the cardinality of a many-valued relationship whose set of values at a given entity may be the empty set.
            </p>
         </description>
      </entity_type>
      <entity_type>
         <name>OneOrMore</name>
         <description>
            <p>
               Used to indicate the cardinality of a many-valued relationship whose set of values at a given entity is non-empty.
            </p>
         </description>
      </entity_type>
   </entity_type>

   <entity_type>
      <name>directional path</name>
      <description>
         <p> Represents a path through the relationships of the entity model and maybe single or many-valued.</p> 
      </description>

      <entity_type>
         <name>composite</name>
         <description>
            <p>A composite directional path.</p>
         </description>
         <composition>
            <type>component</type>
            <description>
               <p>
                  The steps that are to be composed in a composite directional path.
               </p>
            </description>
         </composition>
         <entity_type>
            <name>join</name>
            <description>
               <p>
                  The joining togther of directional paths end to end to form a composite directional path.
                  See section 
                  <a href="http://www.entitymodelling.org/tutorialone/relationalconstructions.html">Relational Constructions</a> of the online book.
               </p>
            </description>
         </entity_type>
         <entity_type>
            <name>aggregate</name>
            <description>
               <p>
                  Represents the aggregation or union of multiple directional paths to form a composite directional path. See section 
                  <a href="http://www.entitymodelling.org/tutorialone/relationalconstructions.html">Relational Constructions</a> of the online book.
               </p>
            </description>
         </entity_type>
      </entity_type>
      <entity_type>
         <name>component</name>
         <description>
            <p>
               A step along a relationship which is either the whole of or a part of a directional path.
            </p>
         </description>
         <reference>
            <name>rel</name>
            <type>directional relationship</type>
            <description>
               <p>The relationship along which a step is taken.
               </p>
               <p>
               This relationship  has an auxiliary scope constraint which can be illustrated as follows 
               <!-- <div id="svgcontainer"> -->
                  <object id="svg-object"
                           data="component.rel..auxiliary_scope.svg"
                           type="image/svg+xml">filler to stop contraction of this xml element</object>
               <!-- </div> -->
               </p>
            </description>
         </reference>
      </entity_type>

      <entity_type>
         <name>identity</name>
         <description>
            <p>
             This is the identity relationship considered as a directional path. 
             The upshot is that this is a path from any given entity to itself i.e. one that 'goes nowhere'.
             This isn't of any use in a join because it doesn't have any effect but can be usefully used in an aggregation. In the language of category theory this is the identity morphism.
          </p>
        </description>
         </entity_type>
         <entity_type>
            <name>theabsolute</name>
            <description>
               <p>
                  The  directional path to the absolute.  
               </p>
               <p>
                  Within any instance of the subject entity model there is a unique root entity which we call the absolute. This directional path refers (evaluates) to this root entity. 
               </p>
               <p>
                  This path is used as the value of both  <i>diagonal</i> and <i>riser</i> for reference relationships which are of global scope.
               </p> 
               <p> 
                  In the langauge of category theory this represents the unqiue morphism to a terminal object.
               </p>
         </description>
         </entity_type>
      <reference>
         <name>src</name>
         <type>entity type like</type>
         <description>
            <p>
            </p>
         </description>
      </reference>
      <reference>
         <name>dest</name>
         <type>entity type like</type>
         <description>
            <p>
            </p>
         </description>
      </reference>
   </entity_type>

   <entity_type>
      <name>auxiliary_scope_constraint</name>
      <description>
         <p>
          If present this specifies a constraint on the extent of a subject relationship  additional to any other scope constraint that may  be specified for it. 
          Like a principle scope constraint its presence obviates 
          the need for one or more attributes which would  otherwise be required for the implementation of the subject relationship.
         </p>
         <p>
            As can also be said of a principle scope constraint, it specifies a condition holding between  relationships of the model which in the  language of category theory can be expressed as the commutativity of a diagram of relationships.
         </p>
      </description>
      <reference>
         <name>identifying_relationship</name>
         <description>
            <p>
               Part of the specification of the auxiliary scope constraint of a reference relationship.
            </p>
            <p>
               Each auxiliary scope constraint specifies a condition holding between some of the relationships of the model which in the  language of category theory can be expressed as the commutativity of a diagram of relationships. One side of this commuting diagram is the subject relationship. The <i>identifying_relationship</i> specifes one of the other sides of this diagram.
            </p>
            <p>
               The <i>identifying_relationship</i> is an instance of <i>directed relationship</i> and should have the <i>identifying</i> property.
            </p>
         </description>
      </reference>
      <composition>
         <name>equivalent_path</name>
         <description>
            <p>
               Part of the specification of the auxiliary scope constraint of a reference relationship.
            </p>
            <p>
               Each auxiliary scope constraint specifies a condition holding between some of the relationships of the model which in the  language of category theory can be expressed as the commutativity of a diagram of relationships. One side of this commuting diagram is the subject relationship. The <i>equivalent_path</i> specifes one of the other sides of this diagram.
            </p>
            <p>
               The <i>equivalent_path</i> is an instance of a <i>directional path</i>.
            </p>
         </description>
      </composition>
   </entity_type>

   <entity_type>
      <name>reference_constraint</name>
      <description>
        <p>
          Present for those attributes within a physical model whose purpose is to implement or be part of the implementation of a relationship.  
        </p>
      </description>
      <dependency>
         <name>..</name>
         <type>attribute</type>
         <description>
            <p>
               The host attribute whose purpose is to implement or be part of the implementation of a relationship.
            </p>
         </description>
      </dependency>
      <reference>
         <name>identifying_attribute</name>
         <type>attribute</type>
         <description>
            <p>
            This is an identifying attribute of the destination entity type of the  <i>supported relationship</i>.
            This attribute may be located on the destination entity type or else be in scope via a chain of identifying dependencies. 
            </p> 
         </description>
      </reference>
      <reference>
         <name>supported_relationship</name>
         <type>primitive relationship</type>
         <description>
            <p>
               This is the reference relationship which is in whole or in part implemented by this foreign key attribute.
            </p>
            <p>
               This relationship  has a primary scope constraint. 
               The 'diagonal' is '../host_entity_type' and the
               'riser' is 'host_entity_type'. This scope constraint can be illustrated as follows 
                  <object id="svg-object"
                           data="reference_constraint.rel..primary_scope.svg"
                           type="image/svg+xml">filler to stop contraction of this xml element</object>
               </p>
         </description>
      </reference>
      <composition>
         <name>identifying_dependency_chain</name>
         <type>directional path</type>
         <description>
            <p>
               This is the path from the destination type of the  <i>supported relationship</i>
               to the location of the  <i>identifying_attribute</i>.
            </p>
         </description>
      </composition>
   </entity_type>

   <entity_type>
      <name>type_constraint</name>
      <description>
         <p>
            Specifies the type of an attribute.
         </p>
         <p>
            Philosophically speaking the possibly types are "types all of whose instances are universals".
         </p>
      </description>
      <entity_type>
         <name>boolean</name>
         <description><p>Specifies the type of the host attribute to be the boolean type.</p></description>
      </entity_type>
      <entity_type>
         <name>date</name>
         <description><p>Specifies the type of the host attribute to be the date type.</p></description>
      </entity_type>
      <entity_type>
         <name>dateTime</name>
         <description><p>Specifies the type of the host attribute to be the date and time type.</p></description>
      </entity_type>
      <entity_type>
         <name>integer</name>
         <description><p>Specifies the type of the host attribute to be the integer type.</p></description>
      </entity_type>
      <entity_type>
         <name>float</name>
         <description><p>Specifies the type of the host attribute to be the float type.</p></description>
      </entity_type>
      <entity_type>
         <name>nonNegativeInteger</name>
         <description><p>Specifies the type of the host attribute to be the nonNegativeInteger type.</p></description>
      </entity_type>
      <entity_type>
         <name>positiveInteger</name>
         <description><p>Specifies the type of the host attribute to be the positiveInteger type.</p></description>
      </entity_type>
      <entity_type>
         <name>string</name>
         <description><p>Specifies the type of the host attribute to be the string type.</p></description>
      </entity_type>
      <entity_type>
         <name>time</name>
         <description><p>Specifies the type of the host attribute to be the time type.</p></description>
      </entity_type>
   </entity_type>
   <entity_type>
      <name>identifying(2)</name>
      <description>
         <p>
            If present specifies that the host attribute is an idenitfying attribute of it host entity type.
         </p>
         <p>
            An entity type is specified to have one of more identifying attributes and relationships.
         </p>
      </description>
   </entity_type>
   <entity_type>
      <name>optional</name>
      <description>
         <p>
            Specifies that the host attribute is optional in other words that
            it is expected that 
            for some entities the attribute may not have a defined value.
         </p>
      </description>
   </entity_type>
</entity_model>
