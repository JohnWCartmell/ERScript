<document xmlns:era="http://www.entitymodelling.org/ERmodel">
  <preface>
    <chapter>
      <title>Preface</title>
      <label>home</label>
      <subtitle>Preface</subtitle>
      <preface> 
        <para>
          This website is an online book, part written as yet, in which entity modelling
          and data design, both relational and hierarchical, are described from first principles
          so as to harmonise with and benefit from mathematical type theory and category theory.
          It features a new theory of relational design supported by open source software implementing
          the physical data design transformation and other model transformations accompanied by 
          code generators to support a variety of programming languages. 
        </para>
		<para>
		I give the reader the challenge, as I have given myself, of understanding and articulating
        entity modelling and the whole business of representation 
        of the world in data  from first principles and without reliance, recourse or reference
        to particular technology - neither any programming language nor any database system.
        I wish  the reader  to be open to discovering
        previously unrecognised patterns  of concepts and data 
		in their own areas of interest and of a kind  that can be exploited 
		in database design and software development. 
		</para>
        <subsection>
          <title>Entity Modelling ...</title>
          <para>
            Entity modelling is saying what is and <emph>doing so purposefully</emph>
            <emdash/> it's a technique and a notation for describing 
            and communicating <emph>what is</emph> in the 
            world and we set out to present it here from first principles. 
            It enables the representation of conceptual models.
            Its practitioners represent types of entity as labelled boxes and relationships 
            as annotated connections between boxes:
            <er_center>
              <filename>refrelChickenLayingAndHatchedFromEgg</filename>
            </er_center>
          </para>		 
          <para>
            There is no standard notation for entity modelling - different authors 
            use different diagramming styles and models are variously known as entity models, 
            entity-relationship (ER) models or entity relationship attribute (ERA) models.  
            This site promotes a notation that is an extension of the data modelling notation used in 
            the SSADM<footnote>
              <bibentry>SSADM</bibentry>
            </footnote>  software design methodology
            and which is described in a book by Richard Barker<footnote>
              <bibentry>RichardBarkerBook</bibentry>
            </footnote>. Sometimes, recognising the influence of Harry Ellis, it is described as the Barker-Ellis notation.
            It is used in a number of data modelling tools including Oracle's SQL Developer Data Modeler.
          </para>
        </subsection>
        <subsection>
          <title>...with a Difference</title>
          <para>        
            Compared to the many books, web pages and lecture notes on this subject, key differentiating features of the presentation here are 
            <itemize>
              <item> we describe concepts from afresh and, as part of the deal, neither rely on nor promote some established terminology which we judge to be not fully fit for purpose,
              </item>
              <item>a distinction is made between 
                composition relationships and reference relationships, 
              </item>
              <item>
                diagrams are laid out top-down,
              </item>
              <item>there is the concept of the scope of a relationship which is then utilised in data design and code generation,
              </item>
              <item>database design is right first time <emdash/> the normalisation step from relational data design is eliminated,
              </item>
              <item>the pullback concept from category theory is incorporated and feeds into code generation.
              </item>
            </itemize>
            </para>
            <para>
            These differences in approach represent a significant and valuable step up from established practice.
            The crux, as expressed in the penultimate bullet point above, is the elimination of the database normalisation step and therefore of much of physical database modelling  - the fulcrum on which this hinges
            is the modelling of the scope of reference relationships as a way of encapsulating
            commutative diagrams of relationships.        
            </para>
        </subsection>

        <subsection>
          <title>Contents</title>
          <!-- obviously a terible way of getting a heading for the contents -->
        </subsection>

      </preface>

    </chapter>
  </preface>


<!--
  <leader> 
    On this site you will find:
  </leader>

-->

  <chapter>
     <include><filename>chapter_1_perspective/perspective.xml</filename></include>
  </chapter>

  <chapter>
     <include><filename>chapter_2_tutorial_part_one/tutorial_part_one.xml</filename></include>
  </chapter>

  <chapter>
     <include><filename>chapter_3_examples_one/examples_one.xml</filename></include>
  </chapter>

  <chapter>
     <include><filename>chapter_4_tutorial_part_two/tutorial_part_two.xml</filename></include>
  </chapter>

  <chapter>
     <include><filename>chapter_7_blog/blog.xml</filename></include>
  </chapter> 
  
    <chapter>
     <include><filename>chapter_8_software/software.xml</filename></include>
  </chapter>
  
    
  <chapter>
     <include><filename>chapter_9_theory/theory.xml</filename></include>
  </chapter>
  
  <chapter>
     <include><filename>chapter_10_finally/finally.xml</filename></include>
  </chapter>
  
  <bibliography>
     <include><filename>bibliography.xml</filename></include>
  </bibliography>

</document>

