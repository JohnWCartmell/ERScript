    <holder>
     <subsection>
      <title>Entity Modelling as Data Modelling</title>
    <para>
      The term <q>Data Modelling</q> we use to cover both database 
      design and also the specification of the structure of messages in quite a broad sense. 
      Entity modelling is most commonly positioned as a precursor to relational data modelling but in fact is equally suitable as method of specifying  
      hierarchical data structures <emdash/> and it is significant that supporting relational, hierarchical and network models of
      data from a single specification  was the <emph>raison d'etre</emph> of 
      the notation as originally proposed by 
      Chen in the seminal paper <q>Unified Model of Data</q> 
      in 1976.<footnote>
        <bibentry>Chen1976</bibentry>
      </footnote>
      This is particularly well illustrated in the 
      Barker Entity Modelling book.<footnote>
        <bibentry>RichardBarkerBook</bibentry>, pages 2-9 <emdash/> 2-13
      </footnote>
    </para> 

    <para>
      ER modelling can be used to specify data at three distinct, increasingly prescriptive levels:
      <itemize>
        <item>conceptual <emdash/> entities and relationships only,</item>
        <item>logical <emdash/> entities, relationships and non-referential attributes,</item>
        <item>physical <emdash/> as logical but with message structure completed by the addition of attributes said to be referential and whose purpose is the representation of relationships.</item>
      </itemize>
    </para>
    <para>
      XXXXXXXXXXXXXXXXXXXXGOT THE BARKER BOOK DOUBLY FOOTNOTED XXXXXXXXXXXXXXXXXXXX
      At the third and most prescriptive level, that of a physical model, an entity model is precisely an abstract data model and such models can be classified as relational or hierarchical;
      most significantly, and in accord with the proposal of Chen, one of each can be generated algorithmically 
      from a well-formulated logical model.   
      Looking back, it seemed that hierarchical structured data took an intellectual back seat for a while during
      the theoretical development 
      and popularisation of the relational model of data but it has made a come back subsequently
      through widespread adoption of the structured markup language XML. Via appropriate physical models 
      both relational Data Definition Language (DDL) and hierarchical XML schemas (DTD, XSD or the like) can be generated 
      automatically from a single logical ER model<footnote>We will return to this theme later 
      but it has been said that relational data models generated in this way will
      naturally tend to be well-formulated data models (i.e. to be in normal form). This is definitely not the case unless 
      account is taken of reference scope constraints  as described here in later sections.</footnote>.
      A logical ER model is agnostic between hierarchical and relational.
    </para>

    </subsection>
    <subsection>
      <title>Historical Persepective</title>
    <para>
      Historically, E.F.Codd's meta theory that was presented as the relational model of data 
      by Codd in 1970,<footnote>
        <bibentry>Codd1970</bibentry>
      </footnote> emerged fully formed <emdash/> 
      the meta concepts of table, 
      column and primary key are defined as is that of a foreign key enabling one table to cross reference the rows of another. 
      His is a theory of <emph>what data is</emph> and this theory came to underpin the majority of corporate databases.  
      Each such database, in accord with Codd's prescriptions, holds a meta-description of its own units of storage 
      <emdash/> the tables, 
      columns and keys <emdash/> what their names are and how they fit together to enable navigation through the data; this description is 
      the core of what is described as a relational schema. 
      The development of the relational model of data in the first place was strongly influenced 
      by the predicate calculus representation of formal logic but arguably 
      this meta-mathematics that influenced Codd was overtaken in mathematical imagination by  later 20th century meta-mathematics in the form of type theory
      and category theory; these are more diagrammatic in form and lead not to the relational model of data but to versions of the  binary entity relationship model such as is promoted in this book. 
      It is these other meta-mathematical disciplines that influence this presentation here and 
      these lead to significant  improvements in relational design methodology. 
      Paradoxically, each such improvement in relational design methodology undermines the
      pre-eminence enjoyed by the relational model.
    </para>

    <para>
      Codd has described various tests of goodness of a schema, applicable, it must be remembered,
      only with cognisance to the possibilities among the data that it is designed to hold 
      i.e. the intended usage.
      In the first instance three tests were described and successively a schema 
      said to be in 1st normal form, 2nd normal 
      form or 3rd normal form depending on its success in passing the tests. 
      A process for fixing deficient schemas is described as normalisation of the schema. 
      Normalisation is therefore a method for converting or transforming one relational schema
       into another that is deemed more suitable for a purpose at hand. 
    </para>

    <para>
      Subsequently, the relations of Codd's model are more abstractly presented, as either entities or as n-ary relationships, 
      in Chen's entity-relationship model of data;
      in the approach of Chen there is emphasis on a diagrammatic representation of the model. 
      Chen describes a method for constructing 
      a relational schema (in the sense of Codd) from an entity-relationship schema (ER-schema).
      He states that normalisation of the relational schema might be required after construction from an ER-schema 
      <emdash/> though why this might be is not explained. We will explain in a later 
      section the fundamental reason why this is so but also why <emph>it need not be so</emph>.
    </para>

    <para>After Chen's 1976 paper, coming into and through the 1980's, came the 
      development, concurrently, of Computer Aided Software 
      Engineering (CASE) tools, including Meta-CASE tools, and semi-formalised and, in some 
      instances, standardised official methodologies 
      and notations supporting structured systems analysis and development. 
      Universally in the methodologies from this time the terms <entity>entity</entity>
      and <entity>relationship</entity> introduced in Chen's paper  were retained within a logical modelling 
      phase and Chen's transformation step into relational database design,
      inclusive of a normalisation step, is likewise retained. 
      Though the terms and the overall shape of the process is retained the concepts behind 
      these terms are subtly shifted. Most noticeably <entity>relationships</entity> are 
      now <entity>binary relationships</entity> 
      and at an early stage in these methodologies many-many 
      relationships are eliminated in favour of many-one relationships. 
      At this point there has been a conceptual <emph>volte face</emph> for a many-one 
      binary relationship, implementation considerations aside, is a thinly disguised and abstracted pointer between records of a file, such as in a VSAM file system, 
      or a link between records in the network database model, and it can be conceptualised, 
      abstractly, as a function between sets of like-typed entities 
      which has lead some authors to describe a 
      functional model of data.<footnote>
        <bibentry>Buneman1979</bibentry>,<bibentry>Shipman1981</bibentry>
      </footnote> 
      The entity-relationship diagrams of these software analysis  methods and the accompanying
      CASE tools that emerged in the 80's bear more resemblance to notation that preceded the work of 
      Codd and Chen such as Bachman's data structure diagrams from 1973<footnote>
        <bibentry>Bachman1973</bibentry>
      </footnote> 
      than to the diagrams of Chen.  
      Among the many, and as summarised in the book of 
      Rosemary Rock-Evans,<footnote>
        <bibentry>Rock-Evans1989</bibentry>
      </footnote>
      there are three variants of binary entity relationship diagram that stand out, 
      those found, respectively,  in SSADM/Barker-Ellis (now adopted by Oracle), in Clive 
      Finkelstein and James Martin's Information Engineering,  
      and in IDEF. 
    </para>
</subsection>

<subsection>
    <title>Logical, Physical and Normalisation</title>
    <para>
      In some instances, software methodologies and supporting CASE tools introduced an intermediate step between the ER model and the
      relational model naming the intermediary model the physical design model to contrast with the logically descriptive model that precedes  it in the software development life-cycle.
      By a significant methodological improvement described in later sections we follow this approach but
      are able to eliminate the normalisation step.
      <figureOfEquation>
        <equationName>ChenTransform</equationName>
        <framewidth>15cm</framewidth>
        <caption>Traditional methodology for relational data design includes a manual normalisation step</caption>  
      </figureOfEquation>
    </para>
    <newline/>
    <para>
    It is noteworthy  that in these methodologies the normalisation step is present in order to achieve the goodness of the physical data model as prescribed by Codd in his normal form prescriptions. In the methodology described in this book we achieve the goodness of the final physical design, i.e. Codd's normal forms, by enabling suitable and pertinent real world conditions to be expressed at the logical level and supporting an automatic transformation to physical models that take advantage of these conditions so as to be able to meet the goodness prescriptions.<footnote>We also describe the features of the logical model that determine whether in addition to Codd's third normal form the goodness condition known as the Boyce-Codd normal form is also be met by the physical model.</footnote> 
  </para>
</subsection>
<subsection>
  <title>Dependent Entities <emdash/> Distinguishing Composition and Reference</title>
    
    <para> 
      Chen's paper introduced the idea of entities being dependent on binary relationships 
      with others for both their identification and their existence:

      <quotation>
        Theoretically, any kind of relationship may be used to identify entities. For
        simplicity, we shall restrict ourselves to the use of only one kind of relationship:
        the binary relationships with 1:n mapping in which the existence of the n entities
        on one side of the relationship depends on the existence of one entity on the other
        side of the relationship. For example, one employee may have n ( = 0, 1, 2, . . .)
        dependants, and the existence of the dependants depends on the existence of the
        corresponding employee.
        This method of identification of entities by relationships with other entities can
        be applied recursively until the entities which can be identified by their own attribute
        values are reached. For example, the primary key of a department in a
        company may consist of the department number and the primary key of the
        division, which in turn consists of the division number and the name of the company.
      </quotation>
    </para>

    <para>
      Following PCTE<footnote> 
        <!--Boudier1988,ECMA-149-->
        <bibentry>Boudier1988</bibentry>
      </footnote> 
      we use the term <entity>composition relationship</entity> for Chen's <emph>binary relationships
        with 1:n mapping in which the existence of the n entities
        on one side ... depends on the existence of one entity on the other side</emph>
      and we use the term <entity>reference relationship</entity> for binary 
      relationships which are neither composition relationships nor their inverses. We shall also describe the inverses of composition relationships 
      as being <entity>dependency relationships</entity>. 
      Previous to the writing of the PCTE specification the distinction 
      had been made by the designers of the CAIS<footnote>
        <bibentry>Oberndorf88</bibentry>
      </footnote>
      specification in which the two kinds of relationship were distinguished as primary 
      and secondary <emdash/> for the designers of CAIS the rationale for the distinction
      was as follows:<footnote>
        <bibentry>Munck1988</bibentry>
      </footnote>
      <quotation>[Entities] and relationships may form a general 
        graph or bowl of spaghetti. However, this raises various practical
        problems of deletion and garbage collection, long term
        naming, and unconnected sub-graphs. CAIS
        therefore designates certain relationships as primary
        (and all others as secondary) and requires that all [Entities]
        and primary relationships in the database form a single
        tree structure.
      </quotation>
      This distinction between composition and reference made by both CAIS and then PCTE served  
      a crucial goal within these specifications of enabling the modelling of a typical computer file system within a database framework, see figure <figref>filesystem2</figref> for example. 

      <figureOfPictureWithNote> 
        <pictureName>filesystem2</pictureName><!-- 
        <width>7cm</width> -->
        <note>
          <width>7cm</width>
          <itemize>
            <item>
              there is a set of <entity>drive</entity>s, 
            </item>
            <item>
              each <entity>drive</entity> has a <emph>root</emph> and the 
              the root of a <entity>drive</entity> is a <entity>folder</entity>,
            </item>
            <item>
              each <entity>folder</entity> is composed of zero, one of more <entity>entry</entity>s,
            </item>
            <item>
              each <entity>entry</entity> is either a <entity>file</entity>, a <entity>folder</entity>
               or a <entity>shortcut</entity>,
            </item>
            <item>
              each <entity>shortcut</entity> make references <emph>to</emph> exactly one <entity>entry</entity>.
            </item>
          </itemize>
        </note>
        <muchtext/>
        <caption>
            An ER model of folder system modelling the hierarchical structure as a recursive composition relationship
            and shortcuts as reference relationships.
          <para>
            We use a variant of the Barker-Ellis notation in which
            we distinguish composition relationships from reference relationships. We draw the diagram top down: 
            the anonymous root entity type (the <q>absolute</q>) is shown at the top of
            the diagram, relationships leaving the lower edges of boxes are composition relationships and 
            they always meet the top edge of the box 
            representing the dependent type, 
            reference relationships connect with the sides of boxes 
            left or right as convenient for the drawing.
          </para>
        </caption>
      </figureOfPictureWithNote> 
    </para>
<!--
    <para> 
      Note that in the version of the ER notation promoted in this book we shall not assume that all composition relationships are identifying nor, vice-versa, that only composition relationships
      may be identifying. To depict ER-schemas we use a variant of the Barker-Ellis notation. Figure <figref>entityRelationalMetaModel1</figref> is a 
      simplified meta-model of this notation <emdash/> it is an ER schema describing ER schemas.
      We give an all singing and dancing version of this <a href="TBD_metamodel_TBD">later</a>.
    </para>
  -->
</subsection>

</holder>
