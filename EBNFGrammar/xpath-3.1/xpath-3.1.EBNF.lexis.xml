<ebnf>
	<grammar>
		<prod>
		    <lhs>NameStartChar</lhs>
		    <rhs>
		    	<token regexp="^[A-Z]|^_|^[a-z]|^[&#xC0;-&#xD6;]|^[&#xD8;-&#xF6;]|^[&#xF8;-&#x2FF;]|^[&#x370;-&#x37D;]|^[&#x37F;-&#x1FFF;]|^[&#x200C;-&#x200D;]|^[&#x2070;-&#x218F;]|^[&#x2C00;-&#x2FEF;]|^[&#x3001;-&#xD7FF;]|^[&#xF900;-&#xFDCF;]|^[&#xFDF0;-&#xFFFD;]|^[&#x10000;-&#xEFFFF;]" />
		    </rhs>
		</prod>
		<prod>
		    <lhs>AdditionalNameChar</lhs>
		    <rhs whitespace="explicit">
		    	<token regexp="^-|^\.|^[0-9]|^&#xB7;|^[&#x0300;-&#x036F;]|^[&#x203F;-&#x2040;]"/>
		    </rhs>
		</prod>
		<!-- 
		<prod>
		    <lhs>Char</lhs>
		    <rhs>
		    	<token regexp="^&#x9;|^&#xA;|^&#xD;|^[&#x20;-&#xD7FF;]|^[&#xE000;-&#xFFFD;]|^[&#x10000;-&#x10FFFF;]"/>
		    </rhs>
		</prod>
		<prod>
		    <lhs>CharCode</lhs>
		    <rhs>
		    	<token regexp="^#x[0-9a-fA-F]+"/>
		    </rhs>
		</prod>
	-->
	<!--
		<prod>
		    <lhs>S</lhs>
		    <rhs>
		    	<token regexp="^&#x9;|^&#xA;|^&#xD;|^&#x20;" />
		    	        /* #x9 is TAB    */
				        /* #xA is LF     */
				        /* #xD is CR     */
				        /* #x20 is SPACE */
		    </rhs>
		</prod>
	-->

		<prod>
			<lhs>OtherNameChar</lhs>
		    <rhs mode='scan' whitespace="explicit">  
	       	    <or>
	       	  	<nt>NameStartChar</nt> 
		       	<nt>AdditionalNameChar</nt>
		       </or>
		    </rhs>
		</prod>
		<prod>
			<lhs>Name</lhs>
		    <rhs mode="scan">
		    	<sequence>
		       	  	<nt>NameStartChar</nt> 
			       	<ZeroOneOrMore>
			       	   <nt>OtherNameChar</nt>  
			       	</ZeroOneOrMore>
		       </sequence>
		    </rhs>
		</prod>

		<prod>
			<lhs>QName</lhs>
		    <rhs >
		    	<or>
		    		<nt>PrefixedName</nt>
		    		<nt>UnprefixedName</nt>
		    	</or>
		    </rhs>
		</prod>

		<prod>
			<lhs>PrefixedName</lhs>
			<rhs whitespace="explicit">
				<sequence> 
					<nt>Whitespace</nt>
					<nt>Prefix</nt>
					<literal>:</literal>
					<nt>LocalName</nt>
				</sequence>
			</rhs>
		</prod>
		<prod>
			<lhs>Whitespace</lhs>
			<rhs>
				<literal/>   <!-- the idea is just to consume whitespace --> 
			</rhs>
		</prod>
		<prod>
			<lhs>UnprefixedName</lhs>
			<rhs>
				<nt>LocalName</nt>
			</rhs>
		</prod>

		<prod>
			<lhs>Prefix</lhs>
			<rhs mode="scan" mapTo="attribute">
				<nt>NCName</nt>
			</rhs>
		</prod>

		<prod>
			<lhs>LocalName</lhs>
			<rhs mode="scan" mapTo="attribute">
				<nt>NCName</nt>
			</rhs>
		</prod>
		<prod>
			<lhs>NCName</lhs> <!-- This is currently same as Name but I think perhaps Name should include ":" also which NCName should not -->
			<rhs mode="scan" mapTo="attribute">
		    	<sequence>
		       	  	<nt>NameStartChar</nt> 
			       	<ZeroOneOrMore>
			       	   <nt>OtherNameChar</nt>  
			       	</ZeroOneOrMore>
		       </sequence>
		    </rhs>
		</prod>
		<prod>
			<lhs>StringLiteral</lhs>
			<rhs>
				<or>
					<nt>DoubleQuotedString</nt>
					<nt>SingleQuotedString</nt>
				</or>
			</rhs>
		</prod>
		<prod>
			<lhs>DoubleQuotedString</lhs>
			<rhs>                
				<sequence>
					<literal>"</literal>
					<nt>DoubleQuotedStringContent</nt>
					<literal>"</literal>
				</sequence>
			</rhs>
		</prod>

		<prod>
			<lhs>DoubleQuotedStringContent</lhs>
			<rhs mode="scan" mapTo="attribute">   
					<ZeroOneOrMore>
						  	<nt>DoubleQuotedStringCharacter</nt>
					</ZeroOneOrMore>
			</rhs>
		</prod>

		<prod>
		    <lhs>DoubleQuotedStringCharacter</lhs> 
		    <rhs mode="scan" whitespace="explicit" >
		    	<token regexp='^[^"]|^""'/>
		    </rhs>
		</prod>
		<prod>
			<lhs>SingleQuotedString</lhs>
			<rhs>
				<sequence>
					<literal>'</literal>
							<nt>SingleQuotedStringContent</nt>
					<literal>'</literal>
				</sequence>
			</rhs>
		</prod>
		<prod>
			<lhs>SingleQuotedStringContent</lhs>
			<rhs mode="scan" mapTo="attribute">
					<ZeroOneOrMore>
							<nt>SingleQuotedStringCharacter</nt>
					</ZeroOneOrMore>
			</rhs>
		</prod>
		<!--
		<prod>
			<lhs>EscapeApos</lhs>
			<rhs whitespace="explicit">
				<token regexp="^''"/>
			</rhs>
		</prod>
	-->

		<prod>
		    <lhs>SingleQuotedStringCharacter</lhs>
		    <rhs whitespace="explicit">
		    	<token regexp="^[^']|^''"/>
		    </rhs>
		</prod>


		<prod>
			<lhs>IntegerLiteral</lhs>
			<rhs>
				<nt>Digits</nt>
			</rhs>
		</prod>

		<prod>
		    <lhs>Digits</lhs>
		    <rhs mode="scan" mapTo="attribute">
		    	<token regexp="^[0-9]+"/>
		    </rhs>
		</prod>

		<prod>
			<lhs>DecimalLiteral</lhs>
			<rhs>
				<nt>DecimalDigits</nt>
			</rhs>
		</prod>

		<prod>
			<lhs>DecimalDigits</lhs>
			<rhs mode="scan" mapTo="attribute">
				<or>
					<sequence>
						<literal>.</literal>
						<nt>Digits</nt>
					</sequence>
					<sequence>
						<nt>Digits</nt>
						<literal>.</literal>
						<ZeroOrOne><nt>Digits</nt></ZeroOrOne> <!-- was OptionalDigits -->
					</sequence>
				</or>
			</rhs>
		</prod>

		<prod>
			<lhs>DoubleLiteral</lhs>
			<rhs>
				<sequence>
					<nt>Mantissa</nt>
					<nt>ExponentSymbol</nt>
					<nt>Exponent</nt>
				</sequence>
			</rhs>
		</prod>

		<prod>
			<lhs>Mantissa</lhs>
			<rhs mode="scan" mapTo="attribute">
					<or>
						<sequence>
							<literal>.</literal>
							<nt>Digits</nt>
						</sequence>
						<sequence>
							<nt>Digits</nt>
							<ZeroOrOne>
								<sequence>
									<literal>.</literal>
									<ZeroOrOne><nt>Digits</nt></ZeroOrOne> <!-- was OptionalDigits -->
								</sequence>
							</ZeroOrOne>
						</sequence>
					</or>
			</rhs>
		</prod>

		<prod>
			<lhs>Exponent</lhs>
			<rhs mode="scan" mapTo="attribute">
				<sequence>
					<ZeroOrOne><nt>Sign</nt></ZeroOrOne>
					<nt>Digits</nt>
				</sequence>
			</rhs>
		</prod>
		<prod>
		    <lhs>ExponentSymbol</lhs>
		    <rhs mode="scan" mapTo="attribute">
		    	<token regexp="^[eE]"/>
		    </rhs>
		</prod>
		<!-- was 
		<prod>
		    <lhs>OptionalSign</lhs>
		    <rhs>
		    	<token regexp="^[+-]?"/>
		    </rhs>
		</prod>
	-->
		<prod>
		    <lhs>Sign</lhs>
		    <rhs>
		    	<token regexp="^[+-]"/>
		    </rhs>
		</prod>
		<prod>
			<lhs>URIQualifiedName</lhs>
			<rhs>
				<sequence>
					<nt>BracedURILiteral</nt> 
					<nt>LocalName</nt>
				</sequence>
			</rhs>
		</prod>
		<prod>
			<lhs>BracedURILiteral</lhs>
			<rhs>
				<sequence>
					<literal>Q{</literal>
					<ZeroOrOne><nt>URI</nt></ZeroOrOne> 
					<literal>}</literal>
				</sequence>
			</rhs>
		</prod>
		<prod>
		    <lhs>URI</lhs>
		    <rhs mode="scan" mapTo="attribute">
		    	<token regexp="^[^{}]+"/>
		    </rhs>
		</prod>
	</grammar>
</ebnf>
