<ebnf>
    <include_grammar filename="xpath-3.1.EBNF.lexis.xml"/>
	<include_grammar filename="xpath-3.1.EBNF.grammar.IDL.xml"/>
	<include_mapping filename="xpath-3.1.EBNF.mapping.xml"/>


    <test>
    	<rhs><nt>Expr</nt></rhs>
		<xpath>1 + 2</xpath>
	</test>

<!--

	<xpath>a[b]</xpath>  COME BAC TO THIS
    <test>
    	<rhs><nt>Expr</nt></rhs>
		<xpath>1</xpath>
	</test>

-->

<!--
    <test>
    	<rhs><nt>Expr</nt></rhs>
		<xpath>
			map {
		
		'DecimalLiteral'    : 1.13 ,
		'ForwardStep'       : child::a,
		'AbbrevForwardStep' : a,

		'InlineFunction' : function($a as xs:double, $b as xs:double) as xs:double { $a * $b },
		'IntegerLiteral' : 2,
		'SquareArrayConstructor'  : [1,2,3] ,
		'SingleQuotedStringLiteral'  : 'this is a string',
		'InstanceOfExp' : x instance of element(para)?,
		'TreatExpr' : 'xxx' treat as xs:boolean,
		'CastExpr' : '999' cast as xs:integer,
		'CastableExpr' : 'xxx' castable as xs:boolean,
		'ArrowExpr' : $string => upper-case() => normalize-unicode() => tokenize('\s+'),
        'SimpleMapExpr' : $values!(.*.),
        'SimpleMapExpr' : a ! b ! c,
		'InstanceofExpr' : 5 instance of xs:integer,
		'InstanceofExpr' : (5, 6) instance of xs:integer+,
		'InstanceofExpr' : x instance of element(*),
		'InstanceofExpr' : x instance of document-node()*,
		'AddExpr' : $x + self::y + child::z,
		'AddExpr' : let + $B * (C + D), 
		'VarREfExpr' : $x[y], 
        'PredicatedExpr' : a[b][c], 
        'DecimalLiteral' : 0.95,
        'DoubleLiteral' : 1.2E3, 
		'DynamicFunctionCall' : $x(a,b,c)(d,e,f),
        'DynamicFunctionCall' : $f(a,c+1), 
        'PredicatedStep' : child::para[position() = 1],
		'PostfixExpr' : $x[y](a,b,c),
		'PostfixExpr' : $x(a,b,c)[z],
		'RootedReachPathExpr' : //a/b/c,
	    'LetExpr' : let $x := y return z,
		'StringLiteral' : 'this is a single quoted literal here is an escaped single quote ''. Like many literals this literal includes spaces'
		 					}
		</xpath>
	</test>

-->
</ebnf>

